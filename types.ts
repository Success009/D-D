// The detailed character sheet, generated by AI and finalized by DM.
export interface Skill {
  name: string;
  description: string; // e.g., "Lasts for 1 minute", "Deals 1d6 fire damage"
}

export interface InventoryItem {
  name: string;
  quantity: number;
}

export interface Character {
  name: string;
  race: string;
  class: string;
  age: number;
  level: number;
  experience: {
    current: number;
    nextLevel: number;
  };
  health: {
    current: number;
    max: number;
  };
  stamina: {
    current: number;
    max: number;
  };
  resource?: { // Optional resource like mana or stamina
    name: string; // 'Mana', 'Stamina', 'Rage', etc.
    current: number;
    max: number;
  };
  stats: {
    strength: number;
    intelligence: number;
    charisma: number;
  };
  skills: Skill[];
  personalityTraits: string[];
  fears: string;
  backstory: string; // AI-summarized backstory
  inventory: InventoryItem[];
  avatarUrl?: string;
}

// Represents a player waiting for approval or in the character creation flow.
// Stored in `DND/pending_players`.
export interface PendingPlayer {
  ip: string; // The unique ID for the player
  accepted: boolean;
  backstory?: string; // The original, player-written backstory
}

// Represents a player who is fully in the game.
// Stored in `DND/active_players`.
export interface ActivePlayer {
  id: string; // The same unique ID as in PendingPlayer
  character_data: Character;
}

export interface NPC {
    id: string;
    character_data: Character;
}

export interface SceneryEntry {
  imageUrl: string;
  timestamp: number;
}

export interface TokenData {
    x: number; // pixel coordinate from left of original image
    y: number; // pixel coordinate from bottom of original image
    visible: boolean;
}

export interface MapData {
    id: string;
    name: string;
    imageUrl: string;
    storagePath: string;
    imageWidth?: number;
    imageHeight?: number;
    tokens: {
        [entityId: string]: TokenData;
    };
    tokenSize: number;
}

export interface DiceRoll {
    isRolling: boolean;
    result: number | null;
    rollerName: string;
    timestamp: number;
    permissionHolder: string | null; // A sanitized player ID or 'DM'
}